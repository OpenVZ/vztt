#!/bin/bash

SCRIPT_NAME=`basename $0`

SCRIPTVERSION=1
NEEDSPACE=110250
FSOPTIONS="rw,errors=continue,barrier=1,data=ordered"
KERN_SUFFIX="-default"

DATADIR="/usr/share/libvznbdmig"

. $DATADIR/ct2vmlib

#getmigscript $SCRIPT_NAME >/dev/null 2>&1

TMPLOSNAME=suse
TMPLVERSION=11.2
TMPLARCH=x86

if [ $TMPLARCH = x86 ]; then
	PACKAGESARCH="i586"
	TMPLENV="rpm41x86"
else
	PACKAGESARCH="x86_64"
	TMPLENV="rpm41x64"
fi

case "$TMPLVERSION" in
	11.0)
		TMPLTITLE="OpenSuSE 11.0"
		CT2VM_PACKAGES_ADD="kernel$KERN_SUFFIX.$PACKAGESARCH grub.$PACKAGESARCH resmgr.$PACKAGESARCH udev.$PACKAGESARCH"
		SYSLOGCONF="/etc/syslog.conf"
		ADD_MODULES="scsi_mod.ko dock.ko libata.ko ata_piix.ko sd_mod.ko jbd.ko mbcache.ko ext3.ko"
		;;
	11.1)
		TMPLTITLE="OpenSuSE 11.1"
		CT2VM_PACKAGES_ADD="kernel$KERN_SUFFIX.$PACKAGESARCH grub.$PACKAGESARCH udev.$PACKAGESARCH"
		SYSLOGCONF="/etc/rsyslog.conf"
		ADD_MODULES="scsi_mod.ko dock.ko libata.ko ata_piix.ko crc-t10dif.ko sd_mod.ko jbd.ko mbcache.ko ext3.ko"
		;;
	11.2)
		TMPLTITLE="OpenSuSE 11.2"
		CT2VM_PACKAGES_ADD="kernel$KERN_SUFFIX.$PACKAGESARCH grub.$PACKAGESARCH udev.$PACKAGESARCH"
		SYSLOGCONF="/etc/rsyslog.conf"
		ADD_MODULES="libata.ko ata_piix.ko ata_generic.ko ide-core.ko piix.ko ide-pci-generic.ko"
		;;
	*)
		TMPLTITLE="Other OpenSuSE"
		CT2VM_PACKAGES_ADD="kernel$KERN_SUFFIX.$PACKAGESARCH grub.$PACKAGESARCH udev.$PACKAGESARCH"
		SYSLOGCONF="/etc/rsyslog.conf"
		ADD_MODULES="scsi_mod.ko dock.ko libata.ko ata_piix.ko crc-t10dif.ko sd_mod.ko jbd.ko mbcache.ko ext3.ko"
		;;
esac

RUN_FROM_CHROOT="$DATADIR/run_from_chroot /vz/pkgenv/$TMPLENV"
VEID=$1
NBD_PATH=$2
MSG_LEVEL=$3
CHECK_PACKAGES=$4
CT2VM_PACKAGES_RM="vzdevs vzdummy-yast-suse102 vzdummy-kernel-suse11 vzdummy-aaa_base-suse102"
INSTDEVICE="/dev/sda1"
DEVMAJOR=8
DEVMINOR=1
INITRD="initrd_createinitrd.img"

. /etc/vz/conf/$VEID.conf
. /etc/vz/vz.conf

function usage() {
	echo "Usage: $1 CTID NBD_PATH MSG_LEVEL [check_packages]"
}

function cleanup(){
	return 0
}

if [ "x$VEID" = "x" ]; then
	usage
	error_msg "You should give CT_IT" $ERR_TMPL
fi

if [ "x$CHECK_PACKAGES" = "xcheck_packages" ]; then
	$VZPKG install $VEID -q -n -p $CT2VM_PACKAGES_ADD >/dev/null 2>&1
	if [ $? -ne 0 ]; then
		error_msg "Can't download packages $CT2VM_PACKAGES_ADD" $ERR_TMPL
	else
		exit 0
	fi
fi

if [ ! -d $NBD_PATH ] || [ "x$NBD_PATH" = "x" ] || [ "x$NBD_PATH" = "/" ]; then
	usage
	error_msg "You should give right NBD_PATH ($NBD_PATH)" $ERR_TMPL
fi

if [ "x$INSTDEVICE" = "x" ]; then
	usage
	error_msg "You should give device" $ERR_TMPL
fi

# Remove and install packages
remove_packages

# Create devices
/bin/mknod $NBD_PATH/dev/null c 1 3 >/dev/null 2>&1
/bin/chmod 666 $NBD_PATH/dev/null >/dev/null 2>&1

install_packages_rpm

msg $MSG_INFO "Changing config files..."

# Fix fstab
fix_fstab

# Add back mingettys to /etc/inittab
add_mingettys

# Tune syslog
if [ -f $NBD_PATH/$SYSLOGCONF ]; then
	mv $NBD_PATH/$SYSLOGCONF $NBD_PATH/$SYSLOGCONF.orig
	cat $NBD_PATH/$SYSLOGCONF.orig | sed "s,^#kern\.warning,kern.warning,g" > \
	$NBD_PATH/$SYSLOGCONF 2>/dev/null
	rm -f $NBD_PATH/$SYSLOGCONF.orig
fi

# Remove vzreboot
rm -f $NBD_PATH/etc/rc.d/rc6.d/S00vzreboot >/dev/null 2>&1

# Tune grub.conf
echo "
timeout=5
default=0
" > $NBD_PATH/boot/grub/grub.conf

if [ ! -f $NBD_PATH/boot/grub/menu.lst ]; then
	ln -s ./grub.conf $NBD_PATH/boot/grub/menu.lst
fi

# Fix aaa_base
VZPKGPACKAGE=`$VZPKG list $VEID -p | awk '{ if ($1 ~ /^aaa_base/) print "aaa_base-"$2}'`.$PACKAGESARCH

for i in halt boot.localfs boot.rootfsck; do
	cp -f /vz/template/$TMPLOSNAME/$TMPLVERSION/$TMPLARCH/$VZPKGPACKAGE/etc/init.d/$i \
	$NBD_PATH/etc/init.d >/dev/null 2>&1
	chown root.root $NBD_PATH/etc/init.d/$i >/dev/null 2>&1
done

# Fix klogd
VZPKGPACKAGE=`$VZPKG list $VEID -p | awk '{ if ($1 ~ /^klogd/) print "klogd-"$2}'`.$PACKAGESARCH
cp -f /vz/template/$TMPLOSNAME/$TMPLVERSION/$TMPLARCH/$VZPKGPACKAGE/etc/init.d/syslog \
	$NBD_PATH/etc/init.d >/dev/null 2>&1
chown root.root $NBD_PATH/etc/init.d/klogd >/dev/null 2>&1

msg $MSG_INFO "Configuring network..."

rm -f $NBD_PATH/etc/sysconfig/network/*venet* >/dev/null 2>&1

if [ -f $NBD_PATH/etc/sysconfig/network/ifcfg-eth0 ]; then
	mv -f $NBD_PATH/etc/sysconfig/network/ifcfg-eth0 \
	$NBD_PATH/etc/sysconfig/network/ifcfg-eth0_pre_migrate
fi

if [ "x$IP_ADDRESS" != "0.0.0.0" ]; then
	NETDEVICE_COUNT=0
	for i in $IP_ADDRESS; do
		if [ $NETDEVICE_COUNT -gt 0 ]; then
			echo "
IPADDR_$((NETDEVICE_COUNT+1))=$i" >> $NBD_PATH/etc/sysconfig/network/ifcfg-eth0
		else
			echo "IPADDR=$i
NETMASK=255.255.255.0
STARTMODE=onboot
USERCONTROL=no
FIREWALL=no
" > $NBD_PATH/etc/sysconfig/network/ifcfg-eth0
		NETDEVICE_COUNT=$((NETDEVICE_COUNT+1))
		fi
	done
fi

set_nameserver

msg $MSG_INFO "Configuring kernel..."

AVAILABLE_KERNELS=`find $NBD_PATH/boot -name vmlinuz*`

[ "x$AVAILABLE_KERNELS" = "x" ] && error_msg "No any kernel available" \
$ERR_TMPL

# Make root device
for i in $INSTDEVICE /dev/root; do
	/bin/mknod $NBD_PATH/$i b $DEVMAJOR $DEVMINOR >/dev/null 2>&1
	/bin/chmod 660 $NBD_PATH/$i >/dev/null 2>&1
done

# Get kernel version and write it to grub
for i in $AVAILABLE_KERNELS; do
	KERN_VERSION=`echo $i | sed "s,.*vmlinuz-,,g" | sed "s,$KERN_SUFFIX,,g"`;

	INITRDTEMPDIR=`mktemp -d /tmp/migrate_initrdXXXXXX`

	[ "x$INITRDTEMPDIR" = "x" ] || [ ! -d $INITRDTEMPDIR ] && \
	error_msg "Failed to create temporary dir" $ERR_TMPL

	cp -a $DATADIR/initrd $INITRDTEMPDIR

	for i in $ADD_MODULES; do
		MODULE=`find /vz/template/$TMPLOSNAME/$TMPLVERSION/$TMPLARCH/*$KERN_SUFFIX-$KERN_VERSION* -name $i`
		if [ -f "$MODULE" ]; then
			cp $MODULE $INITRDTEMPDIR/initrd/lib/ >/dev/null 2>&1
		else
			error_msg "Failed to find module $i" $ERR_TMPL
		fi
	done

	echo "#!/bin/nash

mknod $INSTDEVICE b $DEVMAJOR $DEVMINOR
" > $INITRDTEMPDIR/initrd/bin/load_modules

for ADD_MODULE in $ADD_MODULES; do
	echo "
echo \"Loading $ADD_MODULE module\"
insmod /lib/$ADD_MODULE
" >> $INITRDTEMPDIR/initrd/bin/load_modules
done

	chmod 0755 $INITRDTEMPDIR/initrd/bin/load_modules

	pushd $INITRDTEMPDIR/initrd >/dev/null 2>&1
	find * | cpio -c -o > ../$INITRD 2>/dev/null
	popd >/dev/null 2>&1

	if [ ! -f $INITRDTEMPDIR/$INITRD ]; then
		rm -rf $INITRDTEMPDIR >/dev/null 2>&1
		error_msg "Failed to create initrd" $ERR_TMPL
	fi

	mv $INITRDTEMPDIR/$INITRD $NBD_PATH/boot/$INITRD-$KERN_VERSION$KERN_SUFFIX >/dev/null 2>&1

	rm -rf $INITRDTEMPDIR >/dev/null 2>&1

	mkdir -p $NBD_PATH/$DATADIR >/dev/null 2>&1
	echo "#!/bin/bash

PATH=\"/sbin:/usr/sbin:\$PATH\"
export PATH

mount -o remount,rw /

if [ ! -h /dev/fd ]; then
	rm -rf /dev/fd
	ln -s /proc/self/fd /dev/fd
fi

/sbin/depmod \`uname -r\` >/dev/null 2>&1

# Create proper initrd
/sbin/mkinitrd_setup
/sbin/mkinitrd

if [ \$? -eq 0 ]; then
	echo \"
timeout=5
default=0

title $TMPLTITLE (\`uname -r\`)
	root (hd0,0)
	kernel /boot/vmlinuz-\`uname -r\` rw root=$INSTDEVICE
	initrd /boot/initrd-\`uname -r\`
\" > /boot/grub/grub.conf

fi

insserv boot.udev
insserv boot.crypto
insserv boot.klog

mount -o remount,ro /

sync

reboot -fn
" > $NBD_PATH/$DATADIR/create_initrd
	chmod 0755 $NBD_PATH/$DATADIR/create_initrd >/dev/null 2>&1

	echo "
title Create Initrd ($KERN_VERSION)
	root (hd0,0)
	kernel /boot/vmlinuz-$KERN_VERSION$KERN_SUFFIX ro root=$INSTDEVICE init=$DATADIR/create_initrd
	initrd /boot/$INITRD-$KERN_VERSION$KERN_SUFFIX
" >> $NBD_PATH/boot/grub/grub.conf

done

exit 0
